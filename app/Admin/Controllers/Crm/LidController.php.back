<?php

namespace App\Admin\Controllers\Crm;


use App\Admin\Extensions\Form\NestedFormFlat;
use App\Models\Crm\Volumes;
use Encore\Admin\Form\NestedForm;
use App\Models\Ajax\Modal;
use App\Models\Crm\Lid;
use App\Http\Controllers\Controller;
use App\Models\Crm\LidStatus;
use App\Models\Crm\MasterVolume;
use App\Models\Helper\Action;
use App\Models\Helper\Method;
use App\Models\Helper\Pest;
use App\Models\Helper\Servicing;
use App\Models\Helper\Square;
use App\Models\Helper\Status;
use App\User;
use function Composer\Autoload\includeFile;
use Encore\Admin\Admin;
use Encore\Admin\Auth\Database\Administrator;
use Encore\Admin\Auth\Database\Permission;
use Encore\Admin\Controllers\HasResourceActions;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Layout\Row;
use Encore\Admin\Show;
use Encore\Admin\Facades\Admin as nb;
use Carbon\Carbon;
use Encore\Admin\Widgets\Table;
class LidController extends Controller
{
    use HasResourceActions;

    private $edit = false;

    /*
     *   +"year": 2019
  +"month": 5
  +"day": 30
  +"dayOfWeek": 4
  +"dayOfYear": 150
  +"hour": 0
  +"minute": 0
  +"second": 0
  +"micro": 0
  +"timestamp": 1559174400
  +"formatted": "2019-05-30 00:00:00"
     * */

    public function contract($type = false)
    {
        $st = Carbon::today()->toObject();
        $oLid = Lid::whereBetween('date_start', [Carbon::make($st->formatted), Carbon::make($st->formatted)->add(1, 'day')])
                ->get()->count() + 1;
        if ($type)
            return str_replace('20', '', $st->year) . '-' . $st->month . '-' . $oLid . '-' . $st->day . '-U';
        else
            return str_replace('20', '', $st->year) . '-' . $st->month . '-' . $oLid . '-' . $st->day;
    }




    /**
     * Index interface.
     *
     * @param Content $content
     * @return Content
     */
    public function index(Content $content)
    {
        return $content
            ->header('Index')
            ->description('description')
            ->body($this->grid())
            ;
    }

    /**
     * Show interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function show($id, Content $content)
    {
        return $content
            ->header('Detail')
            ->description('description')
            ->body($this->detail($id));
    }

    /**
     * Edit interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function edit($id, Content $content)
    {
        return $content
            ->header('Edit')
            ->description('description')
            ->body($this->form()->edit($id));
    }

    /**
     * Create interface.
     *
     * @param Content $content
     * @return Content
     */
    public function create(Content $content)
    {
        return $content
            ->header('Новый заказ')
//            ->description('description')
            ->body($this->form());
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new Lid);
        $grid->disableCreateButton();
        $grid->id('ID');
        $grid->created_at('Created at');
        $grid->updated_at('Updated at');

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(Lid::findOrFail($id));

        $show->id('ID');
        $show->created_at('Created at');
        $show->updated_at('Updated at');

        return $show;
    }




    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Lid);

        if(request()->segment(4)){
            $this->edit = true;
        }
        // presets
//        $form->disableEditingCheck();
        $form->disableCreatingCheck();
        $form->disableViewCheck();
        $form->tools(function (Form\Tools $tools) {
            $tools->disableDelete();
            $tools->disableView();
            $tools->disableList();
        });


        $yesNo = [
            'on' => ['value' => 1, 'text' => 'Да', 'color' => 'success'],
            'off' => ['value' => 0, 'text' => 'Нет', 'color' => 'danger'],
        ];


//        $manager = Administrator::whereHas('roles', function($q){
//            $q->where('role_id',2);
//        })->get()->pluck('name','id');


// Основные данные:

        $form->tab('Основные данные',function (Form $form){
    // Дата обращения:
            if($this->edit){
                $form->datetime('date_start', 'Дата обращения:')->readOnly();
            } else {
                $form->datetime('date_start', 'Дата обращения:')->value(Carbon::now())->readOnly();
            }

    // Статус лида:
    // с (дата):
            if($this->edit){
                echo LidStatus::statusShow(request()->segment(3));
                $form->select('status.status', ' Статус лида:')->options(Status::all()->pluck('name', 'id'));
                $form->datetime('status.date', 'с (дата):');
            } else {
                $form->select('status.status', ' Статус лида:')->options(Status::all()->pluck('name', 'id'))->default(4);
                $form->datetime('status.date', 'с (дата):')->value(Carbon::now())->readOnly();
            }

    //Менеджер: Тип обслуживания: Действие:
            $form->display('fake', 'Менеджер:')->value(config('const.admin')->user()->name)->readOnly();
            $form->hidden('manager')->value(config('const.admin')->user()->id);

            if($this->edit){
                $form->text('contract', 'Номер договора:')->readOnly();
            } else {
                $form->hidden('contract', 'Номер договора:')->value($this->contract());
            }


            $form->select('servicing', 'Тип обслуживания:')->options(Servicing::all()->pluck('name', 'id'))->default(1);
            $form->select('action', 'Действие:')->options(Action::all()->pluck('name', 'id'));
            $form->datetime('action_date', 'Дата и время действия:');
            $form->text('action_note', 'Примечание:');            //Комментарий:
            $form->textarea('comment','Комментарий:');

        });


        $form->tab('Данные клиента',function (Form $form){
            $states = [
                'on' => ['value' => 1, 'text' => 'Юридический', 'color' => 'danger'],
                'off' => ['value' => 0, 'text' => 'Физизический', 'color' => 'success'],
            ];
            $form->switch('customer.status', 'Статус клиента:')->states($states);

            $form->text('customer.name', 'Имя');
            $form->text('customer.organization', 'Организация');
            $form->mobile('customer.phone', 'Телефон')->options(['mask' => '+7 (999) 999 99 99']);
            $form->mobile('customer.ext_phone', 'Телефон')->options(['mask' => '+7 (999) 999 99 99']);
            $form->email('customer.email', 'email');
            $form->dadataAddress('customer.address', 'Адрес');
            $form->text('customer.destination', 'Расстояние');
        });
//
        // Обьем работ:
        $form->tab('Обьем работ',function (Form $form){
/*            $form->html('
                                <div id=\'jjj\' >uuuuuuuuuuuuuuuuu</div>

                <script>
                $(document).on(\'click\',\'#jjj\',function(){
                   var ii = unserialize($(\'[action=\"http://lara.mse-crm24.ru/crm/lids\"]\').serialize());




                   console.log(ii);
                });
</script>

          ');*/

            $form->html('
<script type="text/javascript" src="/js/leafLet.js"></script> 
<div id="implementMap">
cccccc 
    <br><br>

<implement-map  v-bind:date="date"></implement-map>
</div>');

            //<input type="text" id="implementStart" v-on:change="al" v-model="newState" />




//            $form->dateButton('choose_master','Дата обработки');


            $form->hasManyFlat('act', 'Акт', function (Form\NestedForm $form) {


                $form->text('act_nr','Номер акта')->attribute(['rel' => 'eeeeee']);


                $form->tableFlat('volume','Обьем(ы)', function ($table) {
                    $table->selectFlat('pest','Предмет работ:')->options(Pest::all()->pluck('name','id'))->load('method', '/api/getter/methods')->parent('act');
                    $table->select('method','Метод:')->options(Method::all()->pluck('name','id'));
                    $table->number('square','Площадь:')->default(0);
                    $table->select('entity','Единица площади:')->options(Square::all()->pluck('name','id'));
                    $table->text('price_standard','Цена гост');
                    $table->text('price_fact','Цена факт.');
                });

                $form->tableFlat('implement','Исполнители', function ($table) {

                    $table->dateButton('choose_master','Дата');
                    $table->text('master','Мастер');
                    $table->datetime('start_date','Начало работ');
                    $table->datetime('end_date','Окончание Работ');
                });


//                $states = [
//                    'on' => ['value' => 1, 'text' => 'Да', 'color' => 'success'],
//                    'off' => ['value' => 0, 'text' => 'Нет', 'color' => 'danger'],
//                ];
//                $form->text('master', 'Мастер');
//                $form->datetime('start_date', 'Начало обработки:');
//                $form->datetime('end_date', 'Конец обработки:');
//                $form->text('increase', 'Сумма увеличения:');
//                $form->text('profit', 'Профит от увеличения:');
//                $form->switch('contract', 'Договор:')->states($states);
//                $form->switch('payment', 'Оплата:')->states($states);
//                $form->text('note', 'Примечание:');





            });


        });

















/*        if($this->edit) {
            $form->saving(function (Form $form){
                dump($form);
                exit();
                ($form->customer_status == 'on') ? $contract = str_replace('-U','',$form->contract) . '-U' : $contract = str_replace('-U','',$form->contract);
                $form->contract = value($contract);


            });
        }else{
            $form->saving(function (Form $form){

                dump($form);
                exit();


                ($form->customer_status == 'on') ? $contract = $this->contract(true) : $contract = $this->contract();
                $form->contract = value($contract);
            });
        }*/
























//        $form->row(function (Form\Row $form){
//        });


        return $form;
    }
}
